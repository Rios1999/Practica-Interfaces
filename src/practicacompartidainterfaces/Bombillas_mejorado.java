package practicacompartidainterfaces;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author grm00
 */
public class Bombillas_mejorado extends javax.swing.JFrame {
    //AQUI SE AÑADE LOS ATRIBUTOS QUE POSTERIORMENTE UTILIZAMOS
    JButton[] btn;
    boolean[] bombillas;
    Color encendido = new Color(255,255,0);
    Color apagado = new Color(240,240,240);
    int g; 
    int intento;
    public Bombillas_mejorado() {
        initComponents();
        intento = 0;
        int w= 85;
        int numB=-1;
        do{//ESTO CONTROLA QUE SE LE PASE CORRECTAMENTE EL NUMERO DE BOMBILLAS QUE SE QUIERE
            try {
                String srt;
                srt = JOptionPane.showInputDialog(this, "Cuantas bombillas quieres?");
                numB = (int) Double.parseDouble(srt);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Eso no es un numero entero", "CUIDADO", JOptionPane.WARNING_MESSAGE);
                numB = -1;
            }
            if (numB <= 2 || numB > 20) {
                JOptionPane.showMessageDialog(this, "El numero debe ser entre 3 y 20");
                numB = -1;
            }
        }while(numB == -1);
        
        //AQUI CREA EL ARRAY DE BOMBILLAS Y LAS COLOCA EN LA VENTANA
        btn = new JButton[numB];
        for (int i = 0; i < numB; i++) {
            crearbotonB(i);
            w += 85;
            this.setSize(w, 300);
        }
        bombillas = new boolean[numB];
        g = this.getSize().width;
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Intents = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Intents.setEditable(false);
        Intents.setText("0");
        jScrollPane1.setViewportView(Intents);

        jLabel1.setText("nº intentos");

        jButton1.setText("Volver a empezar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(249, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//ESTE ES ACTIONPERFORMED DEL REINICIAR QUE LLEVA EL METODO APAGAR TODAS LAS BOMBILLAS
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Apaga();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Bombillas_mejorado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Bombillas_mejorado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Bombillas_mejorado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Bombillas_mejorado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Bombillas_mejorado().setVisible(true);
            }
        });
    }
    //METODO QUE CAMBIA EL COLOR DE LAS BOMOBILLAS 
    private void cambiaB(int pos) {
        if (pos < bombillas.length-1) {
            if (bombillas[pos + 1] != true) {
                bombillas[pos + 1] = true;
                btn[pos + 1].setBackground(encendido);
            } else {
                bombillas[pos + 1] = false;
                btn[pos + 1].setBackground(apagado);
            }

        }
        if (pos >  0) {
            if (bombillas[pos - 1] != true) {
                bombillas[pos - 1] = true;
                btn[pos - 1].setBackground(encendido);
            } else {
                bombillas[pos - 1] = false;
                btn[pos - 1].setBackground(apagado);
            }

        }
        masintento();
    }
    //METODO DE PAGAR TODAS LAS BOMBILLAS
    private void Apaga(){
        for (int i = 0; i < bombillas.length; i++) {
            bombillas[i]=false;
            btn[i].setBackground(apagado);
        }
//        Bombilla0.setBackground(apagado);
//        Bombilla1.setBackground(apagado);
//        Bombilla2.setBackground(apagado);
//        Bombilla3.setBackground(apagado);
//        Bombilla4.setBackground(apagado);
//        Bombilla5.setBackground(apagado);
    }
    //CONTROLA CUANDO TODAS LAS BOMBILLAS ESTAN ENCENDIDAS PARA SALTA UNA PANTALLA QUE TE FELICITA Y ADEMAS TE REPRODUCE UN SONIDO CON IMAGEN
    private void ganar(){
        boolean G = false;
        for (int i = 0; i < bombillas.length; i++) {
            if (bombillas[i] == true) {
                G = true;
            }else{
                G = false;
                i = bombillas.length;
            }
        }
        if (G) {
            String rt = "bombilla.png";
            ImageIcon incon = new ImageIcon(getClass().getResource(rt));
            sonido("win");
            JOptionPane.showMessageDialog(this, "Felicidades has conseguido encender todas las bombillas en "+ intento +" intentos !!", "VICTORIA", JOptionPane.INFORMATION_MESSAGE, incon);
            intento = 0;
            Intents.setText(""+intento);
            Apaga();
        }
    }
    //SUMA EL CONTADOR DE INTENTOS
    private void masintento(){
        intento++;
        Intents.setText(""+intento);
    }
    
    //METODO DE CREACION DE BOTONES CON SUS ATRIBUTOS Y FUNCIONES/METODOS
    public void crearbotonB(int posi){
        btn[posi] = new JButton();
        btn[posi].setName("" + posi);
        btn[posi].setBounds(((posi*85)+30), 5, 85, 85);
        String s = btn[posi].getName();
        ActionListener actL = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent arg0) {
                cambiaB(posi);
                ganar();
            }
        };
        btn[posi].addActionListener(actL);
        //System.out.println(btn.getName());
        this.add(btn[posi]);
    }
    //METODO PARA CREAR Y REFERENCIAR LOS SONIDOS QUE SE REPRODUCEN
    public void sonido(String archivo){
        Clip clip;
        String ruta = "/sonidos/";
        try{
            clip = AudioSystem.getClip();
            clip.open(AudioSystem.getAudioInputStream(getClass().getResourceAsStream(ruta+archivo+".wav")));
            clip.start();
        }catch(Exception e){
           
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane Intents;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
